import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.ToString;

import java.util.ArrayList;
import java.util.List;

// getters and constructors are
// automatically generated by the annotations

@Getter
@NoArgsConstructor
@AllArgsConstructor
@ToString
@EqualsAndHashCode
public class Spring {

    //default value is 1
    private double k = 1;

    private void setK(double k) {
        this.k = k;
    }

    public double[] move(double t, double dt, double x0, double v0) {
        ArrayList<Double> allCoordinates = getAllCoordinates(0, t, dt, x0, v0, null);
        return listToArray(allCoordinates);
    }

    public double[] move(double t, double dt, double x0) {
        ArrayList<Double> allCoordinates = getAllCoordinates(0, t, dt, x0, 0, null);
        return listToArray(allCoordinates);
    }

    public double[] move(double t0, double t1, double dt, double x0, double v0) {
        ArrayList<Double> allCoordinates = getAllCoordinates(t0, t1, dt, x0, v0, null);
        return listToArray(allCoordinates);
    }

    public double[] move(double t0, double t1, double dt, double x0, double v0, double m) {
        ArrayList<Double> allCoordinates = getAllCoordinates(t0, t1, dt, x0, v0, m);
        return listToArray(allCoordinates);
    }

    public Spring inSeries(Spring that) {
        //TODO
        return null;
    }

    public Spring inParallel(Spring that) {
        //TODO
        return null;
    }

    // utility methods
    private ArrayList<Double> getAllCoordinates(double t0, double t1, double dt, double x0, double v0, Double mass) {
        double currentTime = t0;
        double m = mass == null ? 1 : mass;             // by default 1 if not provided
        double omega = Math.sqrt(k / m);
        double c1 = x0;
        double c2 = -v0 / omega;
        ArrayList<Double> coordinates = new ArrayList<>();

        while (currentTime < t1) {
            double coordinate = getHarmonicMotionCoordinate(currentTime, omega, c1, c2);
            coordinates.add(coordinate);
            currentTime += dt;
        }

        return coordinates;
    }

    private double[] listToArray(List<Double> coordinates) {
        return coordinates.stream().mapToDouble(i -> i).toArray();
    }

    private double getHarmonicMotionCoordinate(double t, double omega, double c1, double c2) {
        return (c1 * Math.cos(omega * t) + c2 * Math.sin(omega * t));
    }
}
